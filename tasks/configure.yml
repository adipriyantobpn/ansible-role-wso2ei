---
- block:

    - name: configure WSO2 EI executable files
      template:
        src: "{{ item }}.j2"
        dest: "{{ wso2ei_install_appdir_fullpath }}/{{ item }}"
        mode: 0754
      with_items: "{{ wso2ei_executable_files }}"
      when: wso2ei_enable_custom_configuration

    - name: configure WSO2 EI configuration validation files
      template:
        src: "{{ item }}.j2"
        dest: "{{ wso2ei_install_appdir_fullpath }}/{{ item }}"
      with_items: "{{ wso2ei_config_validation_files }}"
      when: wso2ei_enable_custom_configuration

    - name: copy PEM format certificate
      become: yes
      become_user: root
      copy:
        src: "{{ wso2ei_source_cert_file }}"
        dest: "{{ wso2ei_jks_dirpath }}"
      when: wso2ei_enable_custom_configuration
      register: wso2ei_source_cert_file_copy
      no_log: yes

    - name: "check if web keystore '{{ wso2ei_jks_web_keystore_file_basename }}' is already exists"
      stat:
        path: "{{ wso2ei_jks_web_keystore_file_name }}"
      register: wso2ei_jks_web_keystore_file_name_result
      when: wso2ei_enable_custom_configuration and wso2ei_source_cert_file_copy.changed

    - name: "check if default 'wso2carbon' certificate and priv key is still exists in web keystore '{{ wso2ei_jks_web_keystore_file_basename }}'"
      shell: "keytool -list -alias wso2carbon -keystore {{ wso2ei_jks_web_keystore_file_name }} -storetype jks -storepass {{ wso2ei_jks_web_keystore_password | quote }} -v"
      when: wso2ei_enable_custom_configuration and wso2ei_source_cert_file_copy.changed and wso2ei_jks_web_keystore_file_name_result.stat.exists
      register: wso2ei_web_keystore_wso2carbon_imported
      no_log: yes
      ignore_errors: yes

    - name: "delete default 'wso2carbon' certificate and priv key from web keystore '{{ wso2ei_jks_web_keystore_file_basename }}'"
      shell: "keytool -delete -alias wso2carbon -keystore {{ wso2ei_jks_web_keystore_file_name }} -storepass {{ wso2ei_jks_web_keystore_password | quote }} -v"
      when: wso2ei_enable_custom_configuration and wso2ei_source_cert_file_copy.changed and not 'does not exist' in wso2ei_web_keystore_wso2carbon_imported.stdout
      no_log: yes

    - name: "check if old '{{ wso2ei_source_pkcs12_alias_name }}' certificate and priv key is already imported into web keystore '{{ wso2ei_jks_web_keystore_file_basename }}'"
      shell: "keytool -list -alias {{ wso2ei_source_pkcs12_alias_name | quote }} -keystore {{ wso2ei_jks_web_keystore_file_name }} -storetype jks -storepass {{ wso2ei_jks_web_keystore_password | quote }} -v"
      when: wso2ei_enable_custom_configuration and wso2ei_source_cert_file_copy.changed and wso2ei_jks_web_keystore_file_name_result.stat.exists
      register: wso2ei_web_keystore_pem_imported
      no_log: yes
      ignore_errors: yes

    - name: "delete old '{{ wso2ei_source_pkcs12_alias_name }}' certificate and priv key from web keystore '{{ wso2ei_jks_web_keystore_file_basename }}'"
      shell: "keytool -delete -alias {{ wso2ei_source_pkcs12_alias_name | quote }} -keystore {{ wso2ei_jks_web_keystore_file_name }} -storepass {{ wso2ei_jks_web_keystore_password | quote }} -v"
      when: wso2ei_enable_custom_configuration and wso2ei_source_cert_file_copy.changed and not 'does not exist' in wso2ei_web_keystore_pem_imported.stdout
      no_log: yes

    - name: "generate '{{ wso2ei_source_pkcs12_alias_name }}' PKCS12/PFX format certificate and priv key from supplied PEM format"
      become: yes
      become_user: root
      shell: "openssl pkcs12 -export -in {{ wso2ei_source_cert_file }} -inkey {{ wso2ei_source_cert_private_file }} -name {{ wso2ei_source_pkcs12_alias_name | quote }} -password pass:{{ wso2ei_source_pkcs12_password | quote }} -out {{ wso2ei_source_pkcs12_file_name }}"
      when: wso2ei_enable_custom_configuration and wso2ei_source_cert_file_copy.changed
      no_log: yes

    - name: "import/generate new '{{ wso2ei_source_pkcs12_alias_name }}' PKCS12/PFX format certificate and priv key into web keystore '{{ wso2ei_jks_web_keystore_file_basename }}'"
      shell: "keytool -importkeystore -srckeystore {{ wso2ei_source_pkcs12_file_name }} -srcstoretype pkcs12 -srcstorepass {{ wso2ei_source_pkcs12_password | quote }} -destkeystore {{ wso2ei_jks_web_keystore_file_name }} -deststoretype jks -deststorepass {{ wso2ei_jks_web_keystore_password | quote }} -destkeypass {{ wso2ei_jks_web_keystore_password | quote }} -v -noprompt"
      when: wso2ei_enable_custom_configuration and wso2ei_source_cert_file_copy.changed
      no_log: yes

    - name: "export '{{ wso2ei_source_pkcs12_alias_name }}' full chain PEM certificate from web keystore '{{ wso2ei_jks_web_keystore_file_basename }}'"
      shell: "keytool -exportcert -alias {{ wso2ei_source_pkcs12_alias_name | quote }} -keystore {{ wso2ei_jks_web_keystore_file_name }} -storetype jks -storepass {{ wso2ei_jks_web_keystore_password | quote }} -file {{ wso2ei_cert_exported_jks_file_name }} -v"
      when: wso2ei_enable_custom_configuration and wso2ei_source_cert_file_copy.changed
      register: wso2ei_fullchain_pem_export
      no_log: yes

    - name: "check if old '{{ wso2ei_source_pkcs12_alias_name }}' full chain PEM certificate is already imported into truststore '{{ wso2ei_jks_client_truststore_file_basename }}'"
      shell: "keytool -list -alias {{ wso2ei_source_pkcs12_alias_name | quote }} -keystore {{ wso2ei_jks_client_truststore_file_name }} -storetype jks -storepass {{ wso2ei_jks_client_truststore_password | quote }} -v"
      when: wso2ei_enable_custom_configuration and wso2ei_source_cert_file_copy.changed
      register: wso2ei_client_truststore_pem_imported
      no_log: yes
      ignore_errors: yes

    - name: "delete old '{{ wso2ei_source_pkcs12_alias_name }}' full chain PEM certificate from truststore '{{ wso2ei_jks_client_truststore_file_basename }}'"
      shell: "keytool -delete -alias {{ wso2ei_source_pkcs12_alias_name | quote }} -keystore {{ wso2ei_jks_client_truststore_file_name }} -storepass {{ wso2ei_jks_client_truststore_password | quote }} -v"
      when: wso2ei_enable_custom_configuration and wso2ei_source_cert_file_copy.changed and not 'does not exist' in wso2ei_client_truststore_pem_imported.stdout
      no_log: yes

    - name: "import new '{{ wso2ei_source_pkcs12_alias_name }}' full chain PEM certificate into truststore '{{ wso2ei_jks_client_truststore_file_basename }}'"
      shell: "keytool -importcert -alias {{ wso2ei_source_pkcs12_alias_name | quote }} -file {{ wso2ei_cert_exported_jks_file_name }} -keystore {{ wso2ei_jks_client_truststore_file_name }} -storetype jks -storepass {{ wso2ei_jks_client_truststore_password | quote }} -noprompt -trustcacerts -v"
      when: wso2ei_enable_custom_configuration and wso2ei_source_cert_file_copy.changed
      no_log: yes

    - name: "delete '{{ wso2ei_source_pkcs12_alias_name }}' full chain PEM certificate"
      file:
        path: "{{ wso2ei_cert_exported_jks_file_name }}"
        state: absent
      when: wso2ei_fullchain_pem_export.changed

    - name: "generate primary keystore '{{ wso2ei_jks_primary_keystore_file_basename }}'"
      shell: "keytool -genkeypair -alias {{ wso2ei_source_pkcs12_alias_name | quote }} -dname 'CN={{ wso2ei_jks_primary_keystore_cn }},OU={{ wso2ei_jks_primary_keystore_ou }},O={{ wso2ei_jks_primary_keystore_o }},L={{ wso2ei_jks_primary_keystore_l }},S={{ wso2ei_jks_primary_keystore_s }},C={{ wso2ei_jks_primary_keystore_c }}' -validity {{ wso2ei_jks_primary_keystore_validity_days }} -keyalg {{ wso2ei_jks_primary_keystore_keyalg }} -keysize {{ wso2ei_jks_primary_keystore_keysize }} -ext KeyUsage:c=digitalSignature,dataEncipherment,keyEncipherment -ext SubjectAlternativeName=dns:'{{ wso2ei_jks_primary_keystore_SubjectAlternativeName_dns }}' -ext ExtendedKeyUsage:c=anyExtendedKeyUsage -ext AuthorityInfoAccess=caIssuers:email:'{{ wso2ei_jks_primary_keystore_AuthorityInfoAccess_email }}' -keystore {{ wso2ei_jks_primary_keystore_file_name }} -storetype jks -storepass {{ wso2ei_jks_primary_keystore_password | quote }} -keypass {{ wso2ei_jks_primary_keystore_password | quote }} -v"
      args:
        creates: "{{ wso2ei_jks_primary_keystore_file_name }}"
      when: wso2ei_enable_custom_configuration and wso2ei_source_cert_file_copy.changed
      no_log: yes

    - name: configure WSO2 EI Carbon
      template:
        src: "{{ item }}.j2"
        dest: "{{ wso2ei_install_appdir_fullpath }}/{{ item }}"
      with_items: "{{ wso2ei_carbon_configuration_files }}"
      when: wso2ei_enable_custom_configuration

    - name: configure WSO2 EI Tomcat Catalina-Server
      template:
        src: "{{ item }}.j2"
        dest: "{{ wso2ei_install_appdir_fullpath }}/{{ item }}"
      with_items: "{{ wso2ei_tomcat_catalina_configuration_files }}"
      when: wso2ei_enable_custom_configuration

    - name: configure WSO2 EI Java Permission
      template:
        src: "{{ item }}.j2"
        dest: "{{ wso2ei_install_appdir_fullpath }}/{{ item }}"
      with_items: "{{ wso2ei_java_permission_configuration_files }}"
      when: wso2ei_enable_custom_configuration

    - name: configure WSO2 EI Master Datasources
      template:
        src: "{{ item }}.j2"
        dest: "{{ wso2ei_install_appdir_fullpath }}/{{ item }}"
      with_items: "{{ wso2ei_master_datasource_configuration_files }}"
      when: wso2ei_enable_custom_configuration

    - name: configure WSO2 EI User Management
      template:
        src: "{{ item }}.j2"
        dest: "{{ wso2ei_install_appdir_fullpath }}/{{ item }}"
      with_items: "{{ wso2ei_user_management_configuration_files }}"
      when: wso2ei_enable_custom_configuration

    - name: configure WSO2 EI Axis2
      template:
        src: "{{ item }}.j2"
        dest: "{{ wso2ei_install_appdir_fullpath }}/{{ item }}"
      with_items: "{{ wso2ei_axis2_configuration_files }}"
      when: wso2ei_enable_custom_configuration
  become: yes
  become_user: wso2